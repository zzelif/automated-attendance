/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package automatedattendance;

import automatedattendance.dao.AttendanceDAO;
import automatedattendance.dao.ScheduleDAO;
import automatedattendance.dao.SubjectDAO;
import automatedattendance.dao.TeacherDAO;
import automatedattendance.model.Attendance;
import automatedattendance.model.Subject;
import automatedattendance.model.SubjectSchedule;
import automatedattendance.model.Teacher;
import automatedattendance.model.User;
import automatedattendance.service.AttendanceService;

import java.time.LocalDate;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Puddles
 */
public class TeacherForm extends javax.swing.JFrame {
    private User currentUser;
    private List<Subject> subjects;
    AttendanceService getAttendance = new AttendanceService();
    

    /**
     * Creates new form TeacherForm
     * @param currentUser
     */
    public TeacherForm(User currentUser) {
        this.currentUser = currentUser;
        initComponents();
        startClock();
        setGreetings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAttendance = new javax.swing.JTable();
        cmbSubjects = new javax.swing.JComboBox<>();
        btnRefresh = new javax.swing.JButton();
        cmbSchedules = new javax.swing.JComboBox<>();
        cmbDates = new javax.swing.JComboBox<>();
        btnFilter = new javax.swing.JButton();
        btnLogOutAccount = new javax.swing.JButton();
        lblGreetings = new javax.swing.JLabel();
        btnDeleteCell = new javax.swing.JButton();
        btnShowSummary = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSummary = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(java.awt.Color.darkGray);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "AUTOMATED ATTENDANCE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N

        lblDate.setFont(new java.awt.Font("Century Gothic", 3, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDate.setText("Date and Time");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STUDENTS' ATTENDANCE");

        tblAttendance.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblAttendance.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        tblAttendance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Date", "Time In", "Time Out", "Status", "Remarks"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAttendance.setSelectionForeground(new java.awt.Color(153, 204, 255));
        jScrollPane1.setViewportView(tblAttendance);

        cmbSubjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSubjectsActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        cmbSchedules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSchedulesActionPerformed(evt);
            }
        });

        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        btnLogOutAccount.setText("Log Out");
        btnLogOutAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutAccountActionPerformed(evt);
            }
        });

        lblGreetings.setBackground(new java.awt.Color(0, 0, 0));
        lblGreetings.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblGreetings.setForeground(new java.awt.Color(255, 255, 255));
        lblGreetings.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        btnDeleteCell.setText("Delete");
        btnDeleteCell.setToolTipText("");
        btnDeleteCell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCellActionPerformed(evt);
            }
        });

        btnShowSummary.setText("Show Summary");
        btnShowSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowSummaryActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Summary Table"));

        tblSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Subject", "Present", "Absent", "Late", "Total Attendees"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSummary);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbSchedules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnRefresh)
                                    .addComponent(btnLogOutAccount)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(cmbDates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(btnFilter)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnDeleteCell)
                                        .addGap(100, 100, 100))
                                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                                        .addComponent(lblGreetings, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnShowSummary)))))
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblGreetings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSchedules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnLogOutAccount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbDates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFilter)
                        .addComponent(btnDeleteCell))
                    .addComponent(btnShowSummary))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSubjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSubjectsActionPerformed
        loadSelectedSubject();
    }//GEN-LAST:event_cmbSubjectsActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadSubjects();
        loadSelectedSubject();

//        jPanel2.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadSelectedSubject();
//        jPanel2.setVisible(false);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        int schedIndex = cmbSchedules.getSelectedIndex();
        String selectedDate = (String) cmbDates.getSelectedItem();

        if (schedIndex < 0 || selectedDate == null) {
            JOptionPane.showMessageDialog(this, 
                "Please select a valid schedule and date.", 
                "Filter Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int subjectIndex = cmbSubjects.getSelectedIndex();
        if (subjectIndex < 0 || subjects == null || subjects.isEmpty()) return;

        Subject selectedSubject = subjects.get(subjectIndex);
        ScheduleDAO scheduleDAO = new ScheduleDAO();
        List<SubjectSchedule> schedules = scheduleDAO.getSchedulesBySubject(selectedSubject.getSubjectId());
        if (schedIndex >= schedules.size()) return;

        SubjectSchedule selectedSchedule = schedules.get(schedIndex);
        AttendanceDAO attendanceDAO = new AttendanceDAO();

        List<Attendance> records;
        if ("All Dates".equals(selectedDate)) {
            // Show all attendance for the selected schedule
            records = attendanceDAO.getAttendanceBySchedule(selectedSchedule.getScheduleId());
        } else {
            // Show attendance only for the chosen date
            records = attendanceDAO.getAttendanceByScheduleAndDate(
                    selectedSchedule.getScheduleId(), LocalDate.parse(selectedDate));
        }

        DefaultTableModel model = (DefaultTableModel) tblAttendance.getModel();
        model.setRowCount(0);
        for (Attendance att : records) {
            model.addRow(new Object[]{
                att.getStudentName(),
                att.getDate(),
                att.getTimeIn(),
                att.getTimeOut(),
                att.getStatus(),
                att.getRemarks()
            });
        } 
    }//GEN-LAST:event_btnFilterActionPerformed

    private void cmbSchedulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSchedulesActionPerformed
        // TODO add your handling code here:
        getContentPane().remove(jScrollPane2);
        revalidate();
        repaint();
        int subjectIndex = cmbSubjects.getSelectedIndex();
        int schedIndex = cmbSchedules.getSelectedIndex();

        if (subjectIndex < 0 || schedIndex < 0 || subjects == null || subjects.isEmpty()) {
            return;
        }
        
        Subject selectedSubject = subjects.get(subjectIndex);
        ScheduleDAO scheduleDAO = new ScheduleDAO();
        List<SubjectSchedule> schedules = scheduleDAO.getSchedulesBySubject(selectedSubject.getSubjectId());
        if (schedIndex >= schedules.size()) return;

        SubjectSchedule selectedSchedule = schedules.get(schedIndex);

        refreshAttendanceTable(selectedSchedule);
        loadDatesForSchedule(selectedSchedule.getScheduleId());
    }//GEN-LAST:event_cmbSchedulesActionPerformed

    private void btnLogOutAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutAccountActionPerformed
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to log out?",
            "Logout Confirmation",
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            this.dispose();
            
            java.awt.EventQueue.invokeLater(() -> {
                new LoginForm().setVisible(true);
            });
        }
    }//GEN-LAST:event_btnLogOutAccountActionPerformed

    private void btnDeleteCellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCellActionPerformed
        int row = tblAttendance.getSelectedRow();

        if (row >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblAttendance.getModel();
            int attendanceId = (int) model.getValueAt(row, 0);

            int confirm = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete this attendance record?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                AttendanceDAO attendanceDAO = new AttendanceDAO();
                boolean deleted = attendanceDAO.deleteAttendance(attendanceId);

                if (deleted) {
                    model.removeRow(row);
                    JOptionPane.showMessageDialog(this, "Attendance deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete attendance.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, 
                "Please select an attendance to delete.", 
                "No Attendance Selected", 
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteCellActionPerformed

    private void btnShowSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowSummaryActionPerformed
        int subjectIndex = cmbSubjects.getSelectedIndex();
        int schedIndex = cmbSchedules.getSelectedIndex();
        String selectedDate = (String) cmbDates.getSelectedItem();

        Subject selectedSubject = subjects.get(subjectIndex);
        ScheduleDAO scheduleDAO = new ScheduleDAO();
        List<SubjectSchedule> schedules = scheduleDAO.getSchedulesBySubject(selectedSubject.getSubjectId());
        if (schedIndex >= schedules.size()) return;

        SubjectSchedule selectedSchedule = schedules.get(schedIndex);

        populateSummaryTable(selectedSubject, selectedSchedule, selectedDate);
//        jPanel2.setVisible(true);
    }//GEN-LAST:event_btnShowSummaryActionPerformed
    
    private void loadSubjects() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        SubjectDAO subjectDAO = new SubjectDAO();
        subjects = subjectDAO.getSubjectsByTeacherId(currentUser.getUserId());

        for (Subject subj : subjects) {
            model.addElement(subj.getSubjectName() + " (" + subj.getSubjectCode() + ")");
        }
        cmbSubjects.setModel(model);
    }
    
    private void loadSelectedSubject() {
        int index = cmbSubjects.getSelectedIndex();
        if (index >= 0 && subjects != null && !subjects.isEmpty()) {
            Subject selected = subjects.get(index);
            
            loadSchedules(selected);
        }
    }
    
    private void loadSchedules(Subject subject) {
        ScheduleDAO scheduleDAO = new ScheduleDAO();
        List<SubjectSchedule> schedules = scheduleDAO.getSchedulesBySubject(subject.getSubjectId());

        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        for (SubjectSchedule sched : schedules) {
            String label = sched.getDayOfWeek() + " " + sched.getStartTime()+ " - " + sched.getEndTime();
            model.addElement(label);
        }
        cmbSchedules.setModel(model);

        // Load dates for the first schedule
        if (!schedules.isEmpty()) {
            cmbSchedules.setSelectedIndex(0);
            SubjectSchedule defaultSchedule = schedules.get(0);

            // Load only that schedule's attendance (not all)
            refreshAttendanceTable(defaultSchedule);

            // Load available dates for that specific schedule
            loadDatesForSchedule(defaultSchedule.getScheduleId());
        } else {
            // No schedules — clear attendance table and date combo
            DefaultTableModel tableModel = (DefaultTableModel) tblAttendance.getModel();
            tableModel.setRowCount(0);
            cmbDates.setModel(new DefaultComboBoxModel<>(new String[]{"No Dates"}));
        }
    }
    
    private void loadDatesForSchedule(int scheduleId) {
        AttendanceDAO attendanceDAO = new AttendanceDAO();
        List<LocalDate> availableDates = attendanceDAO.getAvailableDatesBySchedule(scheduleId);

        DefaultComboBoxModel<String> dateModel = new DefaultComboBoxModel<>();
        dateModel.addElement("All Dates"); // default option
        for (LocalDate date : availableDates) {
            dateModel.addElement(date.toString());
        }

        cmbDates.setModel(dateModel);
    }

    
    private void refreshAttendanceTable(SubjectSchedule schedule) {
        DefaultTableModel model = (DefaultTableModel) tblAttendance.getModel();
        model.setRowCount(0);
        AttendanceDAO attendanceDAO = new AttendanceDAO();

        List<Attendance> records = attendanceDAO.getAttendanceBySchedule(schedule.getScheduleId());
        for (Attendance att : records) {
            model.addRow(new Object[]{
                att.getAttendanceId(),
                att.getStudentName(),
                att.getDate(),
                att.getTimeIn(),
                att.getTimeOut(),
                att.getStatus(),
                att.getRemarks()
            });
        }
        
        tblAttendance.getColumnModel().getColumn(0).setMinWidth(0);
        tblAttendance.getColumnModel().getColumn(0).setMaxWidth(0);
    }
    
    private void startClock() {
        javax.swing.Timer timer = new javax.swing.Timer(1000, e -> {
            java.time.LocalDateTime now = java.time.LocalDateTime.now();
            java.time.format.DateTimeFormatter fmt =
                    java.time.format.DateTimeFormatter.ofPattern("EEEE MMMM dd, yyyy HH:mm:ss");
            lblDate.setText(now.format(fmt));
            
        });
        timer.start();
    }
    
    private void setGreetings() {
        TeacherDAO teacherDAO = new TeacherDAO();
        Teacher teacher = teacherDAO.getTeacherByUserId(currentUser.getUserId());
        
        if (teacher != null) {
            lblGreetings.setText("Hello, " + teacher.getFirstName() + "!");
        } else {
            lblGreetings.setText("Hello, Teacher");
        }
    }
    
    private void addSummaryRow(DefaultTableModel model, java.time.LocalDate date, Subject subject, List<Attendance> records) {
    long present = records.stream()
            .filter(a -> a.getStatus() != null && a.getStatus().name().equalsIgnoreCase("present"))
            .count();
    long absent = records.stream()
            .filter(a -> a.getStatus() != null && a.getStatus().name().equalsIgnoreCase("absent"))
            .count();
    long late = records.stream()
            .filter(a -> a.getRemarks() != null && a.getRemarks().name().equalsIgnoreCase("late"))
            .count();
    int total = records.size();

    model.addRow(new Object[]{
        date.toString(),
        subject.getSubjectName(),
        present,
        absent,
        late,
        total
    });
}

    private void populateSummaryTable(Subject subject, SubjectSchedule schedule, String dateOption) {
    String[] cols = {"Date", "Subject", "Present", "Absent", "Late", "Total"};
    DefaultTableModel summaryModel = new DefaultTableModel(cols, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    tblSummary.setModel(summaryModel);

    AttendanceDAO attendanceDAO = new AttendanceDAO();

    if ("All Dates".equals(dateOption)) {
        List<java.time.LocalDate> dates = attendanceDAO.getAvailableDatesBySchedule(schedule.getScheduleId());
        for (java.time.LocalDate date : dates) {
            List<Attendance> records = attendanceDAO.getAttendanceByScheduleAndDate(schedule.getScheduleId(), date);
            addSummaryRow(summaryModel, date, subject, records);
        }
    } else {
        java.time.LocalDate chosenDate = java.time.LocalDate.parse(dateOption);
        List<Attendance> records = attendanceDAO.getAttendanceByScheduleAndDate(schedule.getScheduleId(), chosenDate);
        addSummaryRow(summaryModel, chosenDate, subject, records);
    }
}

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteCell;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnLogOutAccount;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnShowSummary;
    private javax.swing.JComboBox<String> cmbDates;
    private javax.swing.JComboBox<String> cmbSchedules;
    private javax.swing.JComboBox<String> cmbSubjects;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblGreetings;
    private javax.swing.JTable tblAttendance;
    private javax.swing.JTable tblSummary;
    // End of variables declaration//GEN-END:variables
}
